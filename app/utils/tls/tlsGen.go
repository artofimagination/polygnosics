package tlsGen

import (
	"bufio"
	"crypto/tls"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/pkg/errors"
)

// Certificate contains the certificates used by the http server and webrtc secure layer.
type Certficate struct {
	tlsCert  tls.Certificate
	x509Cert *x509.Certificate
}

// GetCertificatesFromFile loads from file and validates TLS certificate and private key pair.
// The certificates are generated by generateCerts.sh. All certificates are signed by the same CA.
func GetCertificatesFromFile() (Certficate, error) {
	cert, err := tls.LoadX509KeyPair("/etc/ssl/certs/cert.pem", "/etc/ssl/private/privkey.pem")
	if err != nil {
		err = fmt.Errorf("Failed to load server key pairs: %s", errors.WithStack(err).Error())
		return Certficate{}, err
	}

	pemFile, err := os.Open("/etc/ssl/certs/cert.pem")
	if err != nil {
		err = fmt.Errorf("Failed to load certificate file: %s", errors.WithStack(err).Error())
		return Certficate{}, err
	}
	pemfileinfo, _ := pemFile.Stat()
	var size int64 = pemfileinfo.Size()
	pembytes := make([]byte, size)
	buffer := bufio.NewReader(pemFile)
	_, err = buffer.Read(pembytes)
	block, _ := pem.Decode([]byte(pembytes))
	if block == nil {
		err = fmt.Errorf("Failed to parse PEM file: %s", errors.WithStack(err).Error())
		return Certficate{}, err
	}
	certPub, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		err = fmt.Errorf("Failed to parse x509 certificate: %s", errors.WithStack(err).Error())
		return Certficate{}, err
	}

	rootCAs, err := x509.SystemCertPool()
	if err != nil {
		err = fmt.Errorf("Failed to load system keychain: %s", errors.WithStack(err).Error())
		return Certficate{}, err
	}

	caCert, err := ioutil.ReadFile("/etc/ssl/certs/ca.pem")
	if err != nil {
		err = fmt.Errorf("Failed to read CA trust file ca.pem: %s", errors.WithStack(err).Error())
		return Certficate{}, err
	}

	ok := rootCAs.AppendCertsFromPEM(caCert)
	if !ok {
		err = fmt.Errorf("Failed to load CA trust: bad PEM format?: %s", errors.WithStack(err).Error())
		return Certficate{}, err
	}

	certifcate := Certficate{
		tlsCert:  cert,
		x509Cert: certPub,
	}
	return certifcate, nil
}
